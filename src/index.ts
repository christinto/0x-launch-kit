#!/usr/bin/env node

import * as fs from 'fs';
import * as inquirer from 'inquirer';

import { buildDockerComposeYml, BuildOptions, Network } from './build';

const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';

const mockERC721Address = '0x07f96aa816c1f244cbc6ef114bb2b023ba54a2eb';

const zeroExAsciiArt = `

............................................................
............................................................
............................................................
..........................,,+I7?~...........................
.....................~DDDDDDDDDDDDDDDD8,....................
..................$DDDDDDDDDDDDDDDDDDDDDDD..................
................DDDDDDDDDDDDDDDDDDDDDDDD....................
..............DDDDDDDDDDDDDDDDDDDDDDDD......=D..............
............=DDDDDDDDDDDDDDDDDDDDDDN......8DDDDD............
............:DDDDDDDDDDDDDDDDDDDDO......ODDDDDDDD...........
..............DDDDDDDD...DDDDDD,......~DDDDDDDDDDD..........
.........D.....DDDDD......?DD...........=DDDDDDDDDD.........
........ZDD:....DD:.......................NDDDDDDDDD........
.......,DDDD7..............................DDDDDDDDDD.......
.......DDDDDDN.............................,NDDDDDDDD.......
.......DDDDDDDD...........................,DDDDDDDDDDD......
.......DDDDDDDDD.........................NDDDDDDDDDDDD......
......7DDDDDDDDDD,.......................DDDDDDDDDDDDD......
......DDDDDDDDDDDDI.......................NDDDDDDDDDDD......
......ZDDDDDDDDDDDD8.......................DDDDDDDDDDD......
......,DDDDDDDDDDDDD........................8DDDDDDDDD......
.......DDDDDDDDDDD...........................?DDDDDDDD......
.......NDDDDDDDDZ,............................,DDDDDD.......
.......,DDDDDDDDD...............................NDDDD.......
........8DDDDDDDDD........................OD.....DDD,.......
.........DDDDDDDDDD?...........DDD.......DDDD.....N:........
..........NDDDDDDDDDD?.......DDDDDD=...DDDDDDD+.............
...........DDDDDDDDDO......NDDDDDDDDDDDDDDDDDDDD............
............ODDDDD:......DDDDDDDDDDDDDDDDDDDDDDD............
.............,NN~.....,NDDDDDDDDDDDDDDDDDDDDDD8.............
....................~DDDDDDDDDDDDDDDDDDDDDDDD,..............
..................?DDDDDDDDDDDDDDDDDDDDDDD$.................
.....................DDDDDDDDDDDDDDDDDD+....................
..........................+DDDDDDZ,.........................
............................................................
............................................................
............................................................
............................................................
............................................................`;

function getRpcUrl(network: Network): string {
    switch (network) {
        case 'mainnet':
            return 'https://mainnet.infura.io/';
        case 'kovan':
            return 'https://kovan.infura.io/';
        case 'ropsten':
            return 'https://ropsten.infura.io/';
        case 'rinkeby':
            return 'https://rinkeby.infura.io/';
        case 'ganache':
            return 'http://ganache:8545/';
        case 'custom':
            return 'http://localhost:8545/';
    }
}

const isAddress = (s: string) => /(0x)?[0-9a-fA-F]{40}/.test(s);

async function main() {
    // Hardcoded answers as you requested
    const answers = {
        tokenType: 'ERC20', // Fixed token type: ERC20
        network: 'kovan', // Fixed network: Kovan
        rpcUrl: 'https://kovan.infura.io/', // Fixed RPC URL for Kovan
        relayerUrl: 'http://localhost:3000/sra/v3', // Fixed relayer URL
        relayerWebsocketUrl: 'ws://localhost:3000/sra/v3', // Fixed websocket URL
        feeRecipient: '0x0000000000000000000000000000000000000000', // Fixed fee recipient
        theme: 'light', // Fixed theme: Light
        port: 3001, // Fixed port
    };

    console.log(
        `
    Wizard complete.

    ðŸš€ðŸš€ðŸš€ðŸš€ .... Preparing for liftoff .... ðŸš€ðŸš€ðŸš€ðŸš€

    Run << docker-compose up >> and open your browser to http://localhost:` +
            answers.port +
            `\n\n\n\n\n`,
    );

    const rpcUrl = answers.network === 'ganache' ? 'http://ganache:8545' : answers.rpcUrl;

    const options: BuildOptions = {
        tokenType: answers.tokenType,
        network: answers.network,
        rpcUrl,
        relayerUrl: answers.relayerUrl,
        relayerWebsocketUrl: answers.relayerWebsocketUrl,
        feeRecipient: answers.feeRecipient || '0x0000000000000000000000000000000000000000',
        theme: answers.theme,
        port: answers.port,
        makerFee: 0, // You can adjust maker and taker fees if necessary
        takerFee: 0, // Fixed fees
        collectibleAddress: '0x0000000000000000000000000000000000000000', // Fixed collectible address
        collectibleName: '', // Fixed empty name
        collectibleDescription: '', // Fixed empty description
    };

    const dockerComposeYml = buildDockerComposeYml(options);

    const composeFilePath = process.argv[2] || 'docker-compose.yml';

    fs.writeFileSync(composeFilePath, dockerComposeYml);
}

main();
